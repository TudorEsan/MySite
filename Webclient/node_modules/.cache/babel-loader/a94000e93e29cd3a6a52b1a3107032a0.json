{"ast":null,"code":"function useFormValidator() {\n  const fields = {};\n\n  const validate = e => {\n    const target = e.target || e;\n    const {\n      field,\n      validators\n    } = fields[target.name];\n\n    if (validators && validators.length) {\n      const isValid = validators.reduce((valid, current) => {\n        return valid && Boolean(current(target.value));\n      }, true);\n      fields[target.name].isValid = isValid;\n\n      if (isValid) {\n        field.classList.remove(\"error\");\n      } else {\n        field.classList.add(\"error\");\n      }\n\n      return isValid;\n    }\n\n    return true;\n  };\n\n  const registerFieldRef = (field, {\n    validators\n  }) => {\n    if (field) {\n      field.addEventListener('blur', function (e) {\n        return validate(e);\n      });\n      fields[field.name] = {\n        field,\n        validators,\n        errorClass\n      };\n    }\n  };\n\n  const register = options => {\n    return ref => ref && registerFieldRef(ref, options);\n  };\n\n  const isFormValid = () => {\n    let isValid = true;\n    Object.keys(fields).forEach(key => {\n      isValid = isValid && validate(fields[key].field);\n    });\n    return isValid;\n  };\n\n  return [register, isFormValid];\n}\n\nexport default useFormValidator;","map":{"version":3,"sources":["/Users/tudoresan/Desktop/MySite/Webclient/src/Data/MyHooks/useForm.js"],"names":["useFormValidator","fields","validate","e","target","field","validators","name","length","isValid","reduce","valid","current","Boolean","value","classList","remove","add","registerFieldRef","addEventListener","errorClass","register","options","ref","isFormValid","Object","keys","forEach","key"],"mappings":"AAAA,SAASA,gBAAT,GAA4B;AACxB,QAAMC,MAAM,GAAG,EAAf;;AACA,QAAMC,QAAQ,GAAIC,CAAD,IAAO;AACpB,UAAMC,MAAM,GAAGD,CAAC,CAACC,MAAF,IAAYD,CAA3B;AACA,UAAM;AAAEE,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAwBL,MAAM,CAACG,MAAM,CAACG,IAAR,CAApC;;AACA,QAAID,UAAU,IAAIA,UAAU,CAACE,MAA7B,EAAqC;AACjC,YAAMC,OAAO,GAAGH,UAAU,CAACI,MAAX,CAAkB,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAClD,eAAOD,KAAK,IAAIE,OAAO,CAACD,OAAO,CAACR,MAAM,CAACU,KAAR,CAAR,CAAvB;AACH,OAFe,EAEb,IAFa,CAAhB;AAGAb,MAAAA,MAAM,CAACG,MAAM,CAACG,IAAR,CAAN,CAAoBE,OAApB,GAA8BA,OAA9B;;AACA,UAAIA,OAAJ,EAAa;AACTJ,QAAAA,KAAK,CAACU,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB;AACH,OAFD,MAEO;AACHX,QAAAA,KAAK,CAACU,SAAN,CAAgBE,GAAhB,CAAoB,OAApB;AACH;;AACD,aAAOR,OAAP;AACH;;AACD,WAAO,IAAP;AACH,GAhBD;;AAkBA,QAAMS,gBAAgB,GAAG,CAACb,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,KAA2B;AAChD,QAAID,KAAJ,EAAW;AACPA,MAAAA,KAAK,CAACc,gBAAN,CAAuB,MAAvB,EAA+B,UAAUhB,CAAV,EAAa;AACxC,eAAOD,QAAQ,CAACC,CAAD,CAAf;AACH,OAFD;AAGAF,MAAAA,MAAM,CAACI,KAAK,CAACE,IAAP,CAAN,GAAqB;AAAEF,QAAAA,KAAF;AAASC,QAAAA,UAAT;AAAqBc,QAAAA;AAArB,OAArB;AACH;AACJ,GAPD;;AASA,QAAMC,QAAQ,GAAIC,OAAD,IAAa;AAC1B,WAAQC,GAAD,IAASA,GAAG,IAAIL,gBAAgB,CAACK,GAAD,EAAMD,OAAN,CAAvC;AACH,GAFD;;AAIA,QAAME,WAAW,GAAG,MAAM;AACtB,QAAIf,OAAO,GAAG,IAAd;AACAgB,IAAAA,MAAM,CAACC,IAAP,CAAYzB,MAAZ,EAAoB0B,OAApB,CAA4BC,GAAG,IAAI;AAC/BnB,MAAAA,OAAO,GAAGA,OAAO,IAAIP,QAAQ,CAACD,MAAM,CAAC2B,GAAD,CAAN,CAAYvB,KAAb,CAA7B;AACH,KAFD;AAIA,WAAOI,OAAP;AACH,GAPD;;AAQA,SAAO,CAACY,QAAD,EAAWG,WAAX,CAAP;AACH;;AAGD,eAAexB,gBAAf","sourcesContent":["function useFormValidator() {\n    const fields = {};\n    const validate = (e) => {\n        const target = e.target || e;\n        const { field, validators } = fields[target.name];\n        if (validators && validators.length) {\n            const isValid = validators.reduce((valid, current) => {\n                return valid && Boolean(current(target.value));\n            }, true);\n            fields[target.name].isValid = isValid;\n            if (isValid) {\n                field.classList.remove(\"error\");\n            } else {\n                field.classList.add(\"error\");\n            }\n            return isValid;\n        }\n        return true;\n    };\n\n    const registerFieldRef = (field, { validators }) => {\n        if (field) {\n            field.addEventListener('blur', function (e) {\n                return validate(e);\n            });\n            fields[field.name] = { field, validators, errorClass };\n        }\n    };\n\n    const register = (options) => {\n        return (ref) => ref && registerFieldRef(ref, options);\n    };\n\n    const isFormValid = () => {\n        let isValid = true;\n        Object.keys(fields).forEach(key => { \n            isValid = isValid && validate(fields[key].field);\n        });\n\n        return isValid;\n    }\n    return [register, isFormValid]\n}\n\n\nexport default useFormValidator;"]},"metadata":{},"sourceType":"module"}